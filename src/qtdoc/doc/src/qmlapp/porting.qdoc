/****************************************************************************
**
** Copyright (C) 2020 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qtquick-porting-qt6.html
\title Porting QML Applications to Qt 6
\brief Lists the Qt 6.0 changes that affect the existing QML applications

When transitioning an application from Qt 5 to Qt 6, there are some smaller changes
that may affect your application. Check the following list to see if you need to update
your code to be compatible.

\section1 Changed type of font.weight
The type of \c font.weight has been changed to \c int. The pre-defined weight classes still
exist, but it is now possible to use arbitrary integers to select fonts which do not
match any of these weight classes. This ensures parity with the C++ API, where it has
always been possible to express the font weight as an arbitrary integer.

Most code will be unaffected by this, except in the case where an implicit conversion
from a string to enum value was used.

\code
font.weight: "Bold"
\endcode

This code will no longer parse correctly and has to be replaced by its equivalent enum value,
as demonstrated below.

\code
font.weight: Font.Bold
\endcode

\section1 Made FontLoader.name a read-only property
In Qt 5, the name property of a FontLoader was writable and would override the source property
of the item when set. This caused some confusion as to its purpose and could cause
undeterministic behavior if there was a race condition between the setters for the conflicting
properties.

In Qt 6, it is no longer possible to set this property. It can only be read. This means that
code such as the following will no longer work.

\code
FontLoader {
    id: fontLoader
    name: "Helvetica"
}

Text {
    font.family: fontLoader.name
    text: "Foobar"
}
\endcode

Instead, use a custom property to store hardcoded font family names.

\code
property string fontName: "Helvetica"

Text {
    font.family: fontName
    text: "Foobar"
}
\endcode

\section1 The OpenGLInfo QML type has been removed

OpenGLInfo was deprecated in Qt 5.8 due to being superseded by GraphicsInfo. In Qt 6,
OpenGLInfo is removed. Use GraphicsInfo instead.

\section1 OpenGL is no longer the default choice on some platforms

While it will present no breaks for many applications, application developers
should be aware that, OpenGL is not always the default choice anymore for Qt
Quick rendering in Qt 6. Unless the \c software backend is used, a Qt Quick
application could use OpenGL, Vulkan, Metal, or Direct3D 11 at run time. When no
explicit request is made, either via the \c QSG_RHI_BACKEND environment variable
or the QQuickWindow::setSceneGraphBackend() function, a platform-specific
default is chosen by Qt Quick. This is currently Metal on macOS and iOS,
Direct3D 11 on Windows, OpenGL elsewhere.

\section1 ShaderEffect source properties are now URLs

The ShaderEffect properties \l{ShaderEffect::vertexShader}{vertexShader} and
\l{ShaderEffect::fragmentShader}{fragmentShader} both have a type of QUrl now,
instead of QByteArray. Their behavior is therefore identical to other similar
properties, such as \l{Image::source}{Image.source}. Existing code that refers
to files via the \c file or \c qrc scheme will continue to work as-is. In
addition, this change allows referring to files with a path relative to the
component's (the .qml file's) location. Specifying the \c{file:} scheme is
therefore optional now.

\section1 ShaderEffect does not support inline GLSL shader strings anymore

Just like with \l{QSGMaterial}{custom materials}, the effects are no longer
specified in form of GLSL shader strings. Rather, shaders are expected to be
preprocessed by the tools from the Qt Shader Tools module, such as the \c qsb
command line tool, thus ensuring the shader assets are usable regardless of
which graphics API (Vulkan, Metal, OpenGL, or Direct 3D) is used at run time.
ShaderEffect items are expected to reference the resulting \c{.qsb} files.

*/

